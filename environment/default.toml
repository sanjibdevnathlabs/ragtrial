# Application metadata
[app]
    name = "ragtrial-app"
    environment = "$APP_ENV"
    version = "1.0.0"

# Logging configuration
[logging]
    level = "INFO"                    # DEBUG, INFO, WARNING, ERROR, CRITICAL
    format = "console"                # "json" for production, "console" for development
    include_caller = false            # Set to true for debugging (shows file/line/function)
    include_process_info = false      # Set to true for concurrency debugging (shows PID/thread)

# Google API configuration
[google]
    api_key = "$GEMINI_API_KEY"

# Vector Store Configuration
[vectorstore]
    provider = "chroma"              # Which vector DB: chroma, pinecone, qdrant, weaviate
    collection_name = "rag_documents"

# ChromaDB-specific settings
[vectorstore.chroma]
persist_directory = "storage/chroma"
distance_function = "cosine"     # cosine, l2, ip
anonymized_telemetry = false

# Pinecone-specific settings
[vectorstore.pinecone]
api_key = "$PINECONE_API_KEY"
cloud = "aws"                    # Cloud provider: aws, gcp, azure
region = "us-east-1"             # Cloud region (AWS: us-east-1, GCP: us-central1, Azure: eastus)
index_name = "rag-documents"
dimension = 768
metric = "cosine"                # Similarity metric: cosine, euclidean, dotproduct
verify_ssl = true                 # SSL certificate verification (disable for dev if needed)

# Qdrant-specific settings
[vectorstore.qdrant]
host = "localhost"
port = 6333
grpc_port = 6334
prefer_grpc = false
api_key = "$QDRANT_API_KEY"                     # Optional for Qdrant Cloud
distance = "Cosine"              # Cosine, Euclid, Dot

# Weaviate-specific settings
[vectorstore.weaviate]
url = "http://localhost:8080"
api_key = "$WEAVIATE_API_KEY"                     # Optional for Weaviate Cloud
class_name = "RagDocument"
distance = "cosine"              # cosine, l2-squared, dot, hamming, manhattan
grpc_port = 50051                # gRPC port (must differ from HTTP port)
default_http_port = 8080         # Default HTTP port if not specified in URL
default_https_port = 443         # Default HTTPS port for secure connections

# Embeddings Configuration
[embeddings]
provider = "google"              # Which embeddings: google, openai, huggingface, cohere, anthropic
dimension = 768

# Google Embeddings settings
[embeddings.google]
model = "models/text-embedding-004"
task_type = "retrieval_document"
batch_size = 100
title = ""

# OpenAI Embeddings settings
[embeddings.openai]
api_key = "$OPENAI_API_KEY"
model = "text-embedding-3-small"  # text-embedding-3-small, text-embedding-3-large
batch_size = 100
dimensions = 1536                 # Can be reduced for efficiency
verify_ssl = true                 # SSL certificate verification (disable for dev if needed)

# HuggingFace Embeddings settings
[embeddings.huggingface]
model_name = "sentence-transformers/all-MiniLM-L6-v2"
cache_folder = "models/huggingface"
device = "cpu"                    # cpu or cuda

# Anthropic (Voyage AI) Embeddings settings
[embeddings.anthropic]
api_key = "$VOYAGE_API_KEY"
model = "voyage-2"                # voyage-2, voyage-large-2
input_type = "document"           # document or query
batch_size = 128
verify_ssl = true                 # SSL certificate verification (disable for dev if needed)

# Storage Backend Configuration
[storage]
backend = "local"                 # Storage backend: local, s3
max_file_size_mb = 100            # Maximum file size for uploads
allowed_extensions = [".pdf", ".txt", ".md", ".csv", ".docx", ".json"]

# Local Storage settings
[storage.local]
path = "source_docs"              # Local directory for document storage
create_if_missing = true          # Create directory if it doesn't exist

# S3 Storage settings
[storage.s3]
bucket_name = "rag-documents"     # S3 bucket name
region = "us-east-1"              # AWS region

# Credential handling (in priority order):
# 1. IAM Role (EC2/ECS/Lambda) - Automatic, most secure
# 2. IRSA (Kubernetes Service Account) - Automatic
# 3. Environment variables (AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY)
# 4. AWS CLI config (~/.aws/credentials)
# 5. Explicit credentials below (NOT RECOMMENDED for production)

use_explicit_credentials = false  # Set to true only for LocalStack
access_key_id = ""                # Leave empty to use credential chain
secret_access_key = ""            # Leave empty to use credential chain

# Optional: For LocalStack (local S3 testing)
endpoint_url = ""                 # Set to "http://localhost:4566" for LocalStack
use_localstack = false            # Set to true for LocalStack development

# Optional: Role assumption (cross-account access)
role_arn = ""                     # e.g., "arn:aws:iam::123456789012:role/rag-role"
role_session_name = "rag-app"     # Session name for role assumption

# API Configuration
[api]
host = "0.0.0.0"                  # API server host
port = 8000                       # API server port
cors_origins = ["*"]              # CORS allowed origins
upload_chunk_size = 1048576       # Upload chunk size (1MB)

# RAG (Retrieval-Augmented Generation) Configuration
[rag]
provider = "google"               # LLM provider: google, openai, anthropic
retrieval_k = 5                   # Number of documents to retrieve

# Google (Gemini) LLM settings
[rag.google]
api_key = "$GEMINI_API_KEY"       # Uses same key as embeddings
model = "gemini-2.5-flash"        # Model: gemini-2.0-flash, gemini-2.5-flash, gemini-2.5-pro
temperature = 0.1                 # Lower temperature for factual answers (0.0-2.0)
max_tokens = 1000                 # Maximum response length

# OpenAI (GPT) LLM settings
[rag.openai]
api_key = "$OPENAI_API_KEY"      # Uses same key as embeddings
model = "gpt-4o-mini"            # Model: gpt-4o, gpt-4o-mini, gpt-4-turbo, gpt-3.5-turbo
temperature = 0.1                 # Lower temperature for factual answers (0.0-2.0)
max_tokens = 1000                 # Maximum response length
verify_ssl = true                 # SSL certificate verification

# Anthropic (Claude) LLM settings
[rag.anthropic]
api_key = "$ANTHROPIC_API_KEY"   # Separate API key
model = "claude-3-5-sonnet-20241022"  # Model: claude-3-5-sonnet, claude-3-opus, claude-3-haiku
temperature = 0.1                 # Lower temperature for factual answers (0.0-1.0)
max_tokens = 1000                 # Maximum response length
verify_ssl = true                 # SSL certificate verification

# ============================================================================
# DATABASE CONFIGURATION (MASTER-SLAVE ARCHITECTURE)
# ============================================================================

[database]
driver = "sqlite"                # Database driver: sqlite, mysql, postgresql
pool_pre_ping = true             # Test connections before using
pool_recycle = 3600              # Recycle connections after 1 hour (seconds)
connect_timeout = 10             # Connection timeout (seconds)

# ----------------------------------------------------------------------------
# SQLite Configuration
# ----------------------------------------------------------------------------

[database.sqlite.write]
path = "storage/metadata.db"     # SQLite database file path (write/master)
debug = false                    # Enable query logging for write operations

[database.sqlite.read]
path = "storage/metadata.db"     # SQLite database file path (read/slave)
debug = false                    # Enable query logging for read operations

# ----------------------------------------------------------------------------
# MySQL Configuration
# ----------------------------------------------------------------------------

[database.mysql.write]
host = "localhost"               # MySQL master host
port = 3306                      # MySQL master port
database = "ragtrial"            # Database name
username = "ragtrial_user"       # Database user (write access)
password = ""                    # Database password (use env var in production)
charset = "utf8mb4"              # Character set
pool_size = 5                    # Connection pool size (write)
max_overflow = 10                # Maximum overflow connections
debug = false                    # Enable query logging for write operations

[database.mysql.read]
host = "localhost"               # MySQL slave host (can be different for read replica)
port = 3306                      # MySQL slave port
database = "ragtrial"            # Database name
username = "ragtrial_readonly"   # Database user (read-only access recommended)
password = ""                    # Database password (use env var in production)
charset = "utf8mb4"              # Character set
pool_size = 10                   # Connection pool size (read) - more connections for reads
max_overflow = 20                # Maximum overflow connections
debug = false                    # Enable query logging for read operations

# ----------------------------------------------------------------------------
# PostgreSQL Configuration
# ----------------------------------------------------------------------------

[database.postgresql.write]
host = "localhost"               # PostgreSQL master host
port = 5432                      # PostgreSQL master port
database = "ragtrial"            # Database name
username = "ragtrial_user"       # Database user (write access)
password = ""                    # Database password (use env var in production)
schema = "public"                # Database schema
pool_size = 5                    # Connection pool size (write)
max_overflow = 10                # Maximum overflow connections
debug = false                    # Enable query logging for write operations

[database.postgresql.read]
host = "localhost"               # PostgreSQL slave host (can be different for read replica)
port = 5432                      # PostgreSQL slave port
database = "ragtrial"            # Database name
username = "ragtrial_readonly"   # Database user (read-only access recommended)
password = ""                    # Database password (use env var in production)
schema = "public"                # Database schema
pool_size = 10                   # Connection pool size (read) - more connections for reads
max_overflow = 20                # Maximum overflow connections
debug = false                    # Enable query logging for read operations
